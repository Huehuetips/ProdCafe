// <auto-generated />
using System;
using ApiEjemplo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiEjemplo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251024053005_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiEjemplo.Models.Catacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aprobado")
                        .HasColumnType("bit")
                        .HasColumnName("aprobado");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<double>("Humedad")
                        .HasColumnType("float")
                        .HasColumnName("humedad");

                    b.Property<int>("LoteTerminadoId")
                        .HasColumnType("int")
                        .HasColumnName("id_LoteTerminado");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notas");

                    b.Property<double>("Puntaje")
                        .HasColumnType("float")
                        .HasColumnName("puntaje");

                    b.HasKey("Id");

                    b.HasIndex("LoteTerminadoId");

                    b.ToTable("catacion");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contacto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contacto");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("clientes");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Etapas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre(Tostado|Molienda|Empaque)");

                    b.HasKey("Id");

                    b.ToTable("etapas");
                });

            modelBuilder.Entity("ApiEjemplo.Models.LoteEtapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EtapaId")
                        .HasColumnType("int")
                        .HasColumnName("id_Etapa");

                    b.Property<DateOnly?>("FechaFin")
                        .HasColumnType("date")
                        .HasColumnName("fechaFin");

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("fechaInicio");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("id_Lote");

                    b.HasKey("Id");

                    b.HasIndex("EtapaId");

                    b.HasIndex("LoteId");

                    b.ToTable("lote_etapa");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Lotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("codigo");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.Property<DateOnly>("FechaIngreso")
                        .HasColumnType("date")
                        .HasColumnName("fechaIngreso");

                    b.Property<DateOnly>("FechaLote")
                        .HasColumnType("date")
                        .HasColumnName("fechaLote");

                    b.Property<DateOnly>("FechaVencimiento")
                        .HasColumnType("date")
                        .HasColumnName("fechaVencimiento");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observaciones");

                    b.HasKey("Id");

                    b.ToTable("lotes");
                });

            modelBuilder.Entity("ApiEjemplo.Models.LotesTerminados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("FechaEnvasado")
                        .HasColumnType("date")
                        .HasColumnName("fechaEnvasado");

                    b.Property<DateOnly>("FechaVencimiento")
                        .HasColumnType("date")
                        .HasColumnName("fechaVencimiento");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("id_Lote");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("id_Producto");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProductoId");

                    b.ToTable("lotesTerminados");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenCompraTipoGrano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadKg")
                        .HasColumnType("int")
                        .HasColumnName("cantidadKg");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("int")
                        .HasColumnName("id_OrdenCompra");

                    b.Property<double>("PrecioTotal")
                        .HasColumnType("float")
                        .HasColumnName("precioTotal");

                    b.Property<double>("PrecioUnitarioKg")
                        .HasColumnType("float")
                        .HasColumnName("precioUnitarioKg");

                    b.Property<int>("TipoGranoId")
                        .HasColumnType("int")
                        .HasColumnName("id_TipoGrano");

                    b.HasKey("Id");

                    b.HasIndex("OrdenCompraId");

                    b.HasIndex("TipoGranoId");

                    b.ToTable("ordenCompra_tipoGrano");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenCompraTipoGranoLote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadKg")
                        .HasColumnType("int")
                        .HasColumnName("cantidadKg");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("id_Lote");

                    b.Property<int>("OrdenCompraTipoGranoId")
                        .HasColumnType("int")
                        .HasColumnName("id_OrdenCompra_TipoGrano");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.HasIndex("OrdenCompraTipoGranoId");

                    b.ToTable("ordenCompra_tipoGrano_lote");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenesCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.Property<DateOnly>("FechaEmision")
                        .HasColumnType("date")
                        .HasColumnName("fechaEmision");

                    b.Property<DateOnly?>("FechaRecepcion")
                        .HasColumnType("date")
                        .HasColumnName("fechaRecepcion");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("id_proveedor");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.ToTable("ordenesCompra");
                });

            modelBuilder.Entity("ApiEjemplo.Models.PedidoLoteTerminado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("LoteTerminadoId")
                        .HasColumnType("int")
                        .HasColumnName("id_LoteTerminado");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int")
                        .HasColumnName("id_Pedido");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("id_Producto");

                    b.HasKey("Id");

                    b.HasIndex("LoteTerminadoId");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("pedido_loteTerminado");
                });

            modelBuilder.Entity("ApiEjemplo.Models.PedidoRuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fechaEntrega");

                    b.Property<DateOnly>("FechaSalida")
                        .HasColumnType("date")
                        .HasColumnName("fechaSalida");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int")
                        .HasColumnName("id_pedido");

                    b.Property<int>("RutaId")
                        .HasColumnType("int")
                        .HasColumnName("id_Ruta");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("RutaId");

                    b.ToTable("pedido_ruta");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Pedidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("id_Cliente");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<bool>("Prioritaria")
                        .HasColumnType("bit")
                        .HasColumnName("prioritaria");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Presentaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("presentaciones");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Productos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NivelTostado")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nivelTostado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<double>("Precio")
                        .HasColumnType("float")
                        .HasColumnName("precio");

                    b.Property<int>("PresentacionId")
                        .HasColumnType("int")
                        .HasColumnName("id_Presentacion");

                    b.Property<string>("TipoMolido")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipoMolido");

                    b.HasKey("Id");

                    b.HasIndex("PresentacionId");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Proveedores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("proveedores");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Rutas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<double>("TiempoEstimadoH")
                        .HasColumnType("float")
                        .HasColumnName("tiempoEstimadoH");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipo");

                    b.Property<string>("Zona")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zona");

                    b.HasKey("Id");

                    b.ToTable("rutas");
                });

            modelBuilder.Entity("ApiEjemplo.Models.TiposGrano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre(arábica|robusta|blends)");

                    b.HasKey("Id");

                    b.ToTable("tiposGrano");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Catacion", b =>
                {
                    b.HasOne("ApiEjemplo.Models.LotesTerminados", "LoteTerminado")
                        .WithMany("Cataciones")
                        .HasForeignKey("LoteTerminadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LoteTerminado");
                });

            modelBuilder.Entity("ApiEjemplo.Models.LoteEtapa", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Etapas", "Etapa")
                        .WithMany("LoteEtapas")
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.Lotes", "Lote")
                        .WithMany("LoteEtapas")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Etapa");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("ApiEjemplo.Models.LotesTerminados", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Lotes", "Lote")
                        .WithMany("LotesTerminados")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.Productos", "Producto")
                        .WithMany("LotesTerminados")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lote");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenCompraTipoGrano", b =>
                {
                    b.HasOne("ApiEjemplo.Models.OrdenesCompra", "OrdenCompra")
                        .WithMany("OrdenCompraTipoGranos")
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.TiposGrano", "TipoGrano")
                        .WithMany("OrdenCompraTipoGranos")
                        .HasForeignKey("TipoGranoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrdenCompra");

                    b.Navigation("TipoGrano");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenCompraTipoGranoLote", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Lotes", "Lote")
                        .WithMany("OrdenCompraTipoGranoLotes")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.OrdenCompraTipoGrano", "OrdenCompraTipoGrano")
                        .WithMany("OrdenCompraTipoGranoLotes")
                        .HasForeignKey("OrdenCompraTipoGranoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lote");

                    b.Navigation("OrdenCompraTipoGrano");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenesCompra", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Proveedores", "Proveedor")
                        .WithMany("OrdenesCompras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("ApiEjemplo.Models.PedidoLoteTerminado", b =>
                {
                    b.HasOne("ApiEjemplo.Models.LotesTerminados", "LoteTerminado")
                        .WithMany("PedidoLoteTerminados")
                        .HasForeignKey("LoteTerminadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.Pedidos", "Pedido")
                        .WithMany("PedidoLoteTerminados")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.Productos", "Producto")
                        .WithMany("PedidoLoteTerminados")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LoteTerminado");

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ApiEjemplo.Models.PedidoRuta", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Pedidos", "Pedido")
                        .WithMany("PedidoRutas")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiEjemplo.Models.Rutas", "Ruta")
                        .WithMany("PedidoRutas")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Pedidos", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Clientes", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Productos", b =>
                {
                    b.HasOne("ApiEjemplo.Models.Presentaciones", "Presentacion")
                        .WithMany("Productos")
                        .HasForeignKey("PresentacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Presentacion");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Clientes", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Etapas", b =>
                {
                    b.Navigation("LoteEtapas");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Lotes", b =>
                {
                    b.Navigation("LoteEtapas");

                    b.Navigation("LotesTerminados");

                    b.Navigation("OrdenCompraTipoGranoLotes");
                });

            modelBuilder.Entity("ApiEjemplo.Models.LotesTerminados", b =>
                {
                    b.Navigation("Cataciones");

                    b.Navigation("PedidoLoteTerminados");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenCompraTipoGrano", b =>
                {
                    b.Navigation("OrdenCompraTipoGranoLotes");
                });

            modelBuilder.Entity("ApiEjemplo.Models.OrdenesCompra", b =>
                {
                    b.Navigation("OrdenCompraTipoGranos");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Pedidos", b =>
                {
                    b.Navigation("PedidoLoteTerminados");

                    b.Navigation("PedidoRutas");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Presentaciones", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Productos", b =>
                {
                    b.Navigation("LotesTerminados");

                    b.Navigation("PedidoLoteTerminados");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Proveedores", b =>
                {
                    b.Navigation("OrdenesCompras");
                });

            modelBuilder.Entity("ApiEjemplo.Models.Rutas", b =>
                {
                    b.Navigation("PedidoRutas");
                });

            modelBuilder.Entity("ApiEjemplo.Models.TiposGrano", b =>
                {
                    b.Navigation("OrdenCompraTipoGranos");
                });
#pragma warning restore 612, 618
        }
    }
}
